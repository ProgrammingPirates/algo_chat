#include <stdio.h>
#include<unistd.h>
#include<sys/wait.h>
#include<sys/types.h>
#include<pthread.h>
#include<stdlib.h>

double cubeRoot(double n) {
   double i, precision = 0.000001;
   
   for(i = 1; (i*i*i) <= n; i++);         //Integer part

   for(--i; (i*i*i) < n; i += precision);  //Fractional part
   
   return i;
}
void *cbr(){
    int limit;
    double* ptr= (double *)malloc(110* sizeof(double));
    for(int i=0; i<100; i++){
        *(ptr+i)= cubeRoot(i* 1.0);
    }
    pthread_exit(ptr);
}

int main() {
   pthread_t t;
   
   pthread_create(&t, NULL, cbr, NULL);
   double* result;
   pthread_join(t, (void **)&result);
   for(int i=0; i<100; i++){
       printf("%lf\n", result[i]);
   }
   printf("\n");
   free(result);
   return 0;
}